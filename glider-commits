#!/bin/bash
#
# by William Hofferbert
#
#
# this is a visual representation of the commits that
# will be set up to happen
# 
# It just sucks cause you have to not do much with git
# for 4-5 weeks... or be careful about commiting things
#
# S x x x x x 
# M x x x x x 
# T x x 0 x x 
# W x x x 0 x 
# T x 0 0 0 x 
# F x x x x x
# S T x x x x 
#

#
# Functions
#

helps () {
fold -s -w $(tput cols) << EOF

  Draw a glider on your git activity chart.

  This script schedules git commits to be executed with the 'at' daemon
  at specific times to draw a glider on the activity chart.

  To prevent accidental commits wrecking the image, an alias is temporarily 
  added to your ~/.bashrc to provide a warning message instead of calling 
  the actual 'git'.

  To circumvent this behavior, specify the complete path to git ($(which git))

  NOTE that if you use git from many computers, you run the risk of bypassing
  the ~/.bashrc change. 

  You will also have to re-source your ~/.bashrc or log out and back in to 
  have the changes take affect.


Usage

  $name_bold [options] ${bold}[--engage|--disengage]${reg}

Options:

  --engage | -E
    Engage the mechanism. This disables your 'git' shortcut and
    plots to commit changes at specific times to draw the glider

  --disengage | -D
    Disengage the mechanism. Puts your ~/.bashrc back to the way it was
    and remove any reamining glider jobs from the atq

  --offset-hours | -O   [INTEGER]
    Specify an integer number of hours to offset the commits by
    Default is $offset_hours

  --repitition | -r   [INTEGER]
    Specify the minimum number of commits to make each day
    Default is $num_commits

  --delay-secs | -d   [INTEGER]
    Specify the number of seconds to wait between repeated commits
    Default is $commit_timing_secs

  --project-dir [/path/to/git/project]
    Specify the project to update
    Default is $project_dir

  --update-file [filename]
    Specify the file to overwrite with random data
    Default is $dummy_file

  --rcfile [/path/to/rcfile]
    Specify an rcfile to adust instead of $rcfile
    Must support bash-style functions and alias

  --git-push-string 'push string'
    Specify the push string to use for the git push
    Default is $git_push

  --help | -h
    Display this help text.


Examples

  $0 --engage
  # Turn the mechanism on

  $0 --disengage
  # Turn the mechanism off


EOF
exit 0
}


handle_args () {
  OPTS=$(getopt -o hqsEDO:r:d: --long "help,quiet,silent,engage,disengage,offset-hours:,repitition:,delay-secs:,rcfile:,project-dir:,update-file:"  -- "$@")
  eval set -- "$OPTS"
  while true
    do
      case "$1" in
        -h|--help) helps; shift;;
        -q|--quiet) q=">/dev/null"; shift;;
        -s|--silent) q=">/dev/null 2>/dev/null"; shift;;
        -E|--engage) engage="t"; shift;;
        -D|--disengage) disengage="t"; shift;;
        -O|--offset-hours) offset_hours=$2; shift 2;;
        -r|--repitition) num_commits=$2; shift 2;;
        -d|--delay-secs) commit_timing_secs=$2; shift 2;;
        --rcfile) rcfile="$2"; shift 2;;
        --project-dir) project_dir="$2"; shift 2;;
        --update-file) dummy_file="$2"; shift 2;;
        --git-push-string) git_push="$2" ; shift 2;;
        --) shift; break;;
      esac
  done
}


err () {
  echo "$1" >&2
  exit 2
}


warn () {
  echo "$1" >&2
}


cleanup () {
  warn "Signal received ..."
  exit 1
}


sanity () {
  [ "$engage" = "f" -a "$disengage" = "f" ] && err "Must be ran to engage or disenage! (see $0 --help for more information)"
}


set_env () {
  script_path=$( cd "$(dirname "$0")" ; pwd -P )
  script_name=$(basename $0)
  self=$script_path/$script_name

  bold=$(tput bold)
  reg=$(tput sgr0)
  name_bold="${bold}${script_name}${reg}"

  rcfile=~/.bashrc

  # env_defaults here
  q=

  offset_hours=6
  date_s=$(( $(date --date="next thursday" +%s) + (60 * 60 * $offset_hours) ))
  day_secs=$((60 * 60 * 24))
  commit_times=("$date_s" "$(($date_s + ($day_secs * 5) ))" "$(($date_s + ($day_secs * 7)))" "$(($date_s + ($day_secs * 13)))" "$(($date_s + ($day_secs * 14)))" )

  num_commits=42
  commit_timing_secs=60

  engage=f
  disengage=f

  project_dir=/home/$(whoami)/git/bash/hacker-glider-commit

  requires="at date"

  dummy_file=dummy_file

  commit_message="glider commits"
  git_push="push -u $(whoami) master"
}

setup_jobfile () {
cat << EOF
cd $project_dir
head -1 /dev/urandom > $project_dir/$dummy_file
$(which git) commit -m "$commit_message" $dummy_file
$(which git) $git_push
EOF
}

turn_on_jobs () {
  jobfile=/tmp/.glider.$RANDOM
  setup_jobfile > $jobfile
  for secs in "${commit_times[@]}"
    do
      offset=0
      for rep in $(seq 1 1 $num_commits)
        do
          at_time=$(date --date=@$(($secs + $offset)) "+%y%m%d%H%M")
          at -M -q g -f $jobfile -t $at_time 2>/dev/null
          offset=$(($offset + $commit_timing_secs))
        done
    done
  echo "$self -D" > $jobfile
  endtime=$(($date_s + ($day_secs * 23)))
  at -M -q g -f $jobfile -t $(date --date=@$endtime) "+%y%m%d%H%M" 2>/dev/null
  rm $jobfile
}

glider_rc () {
cat << EOF
# BEGIN GLIDER MODS
# DO NOT ADJUST THESE COMMENTS

git_warn () {
cat << EOWARN

But... But... Think of the Glider!

You can still use git by specifying the complete
path.... \$(which git)

EOWARN
}

# create an alias for 'git'
alias git=git_warn


# DO NOT ADJUST THESE COMMENTS
# END GLIDER MODS
EOF
}

adjust_bashrc () {
  cp $rcfile $rcfile.bak
  glider_rc >> $rcfile
}

reset_bashrc () {
  # this should be better
  [ ! -e $rcfile.bak ] && err "No backup $rcfile found! Was $0 ever engaged?"
  cp $rcfile $rcfile.glider.bak
  cp $rcfile.bak $rcfile
}

reset_atq () {
  atq | awk '{if ($7 ~ /g/) print $1}' | while read jobid
    do
      atrm $jobid
    done
}

engage () {
  [ -n "$(grep "END GLIDER MODS" $rcfile)" ] && err "Already engaged!"
  turn_on_jobs
  adjust_bashrc
}

disengage () {
  reset_atq
  reset_bashrc
}

main () {
  set_env
  handle_args $@
  sanity
  trap cleanup 1 2 3 6 9 15 17 19 23
  [ "$engage" = "t" ] && engage
  [ "$disengage" = "t" ] && disengage
}

eval main $@ $q
